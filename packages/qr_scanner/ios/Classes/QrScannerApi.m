// Autogenerated from Pigeon (v5.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "QrScannerApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[ error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null] ];
  }
  return @[ result ?: [NSNull null]  ];
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface QrScanRequest ()
+ (QrScanRequest *)fromList:(NSArray *)list;
+ (nullable QrScanRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end
@interface QrScanResult ()
+ (QrScanResult *)fromList:(NSArray *)list;
+ (nullable QrScanResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation QrScanRequest
+ (instancetype)makeWithInstruction:(nullable NSString *)instruction {
  QrScanRequest* pigeonResult = [[QrScanRequest alloc] init];
  pigeonResult.instruction = instruction;
  return pigeonResult;
}
+ (QrScanRequest *)fromList:(NSArray *)list {
  QrScanRequest *pigeonResult = [[QrScanRequest alloc] init];
  pigeonResult.instruction = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable QrScanRequest *)nullableFromList:(NSArray *)list { return (list) ? [QrScanRequest fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.instruction ?: [NSNull null]),
  ];
}
@end

@implementation QrScanResult
+ (instancetype)makeWithScannedData:(nullable NSString *)scannedData {
  QrScanResult* pigeonResult = [[QrScanResult alloc] init];
  pigeonResult.scannedData = scannedData;
  return pigeonResult;
}
+ (QrScanResult *)fromList:(NSArray *)list {
  QrScanResult *pigeonResult = [[QrScanResult alloc] init];
  pigeonResult.scannedData = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable QrScanResult *)nullableFromList:(NSArray *)list { return (list) ? [QrScanResult fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.scannedData ?: [NSNull null]),
  ];
}
@end

@interface QrScannerApiCodecReader : FlutterStandardReader
@end
@implementation QrScannerApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [QrScanRequest fromList:[self readValue]];
    
    case 129:     
      return [QrScanResult fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface QrScannerApiCodecWriter : FlutterStandardWriter
@end
@implementation QrScannerApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[QrScanRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
  if ([value isKindOfClass:[QrScanResult class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface QrScannerApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation QrScannerApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[QrScannerApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[QrScannerApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *QrScannerApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    QrScannerApiCodecReaderWriter *readerWriter = [[QrScannerApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void QrScannerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<QrScannerApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.QrScannerApi.scanQrCode"
        binaryMessenger:binaryMessenger
        codec:QrScannerApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(scanQrCodeRequest:error:)], @"QrScannerApi api (%@) doesn't respond to @selector(scanQrCodeRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        QrScanRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        QrScanResult *output = [api scanQrCodeRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
